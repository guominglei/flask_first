# -*- coding:utf-8 -*-

"""
    第一个小例子
"""


from flask import Flask, url_for,request,Response

from flask import abort # abort(error_code)抛出异常结束方法。

from flask import session

from flask import redirect

app = Flask(__name__)

@app.route("/")
def hello_world():

    print session.get("username", "not find")
    return "hello world"

##############
"""
    URL传递三种方式的变量
"""
@app.route("/int/<int:uid>", methods=["GET", "POST"]) # methods 控制函数接受的方法。
def int_test(uid):
    if request.method == "GET":
        return "GET uid is {}\t type(uid) is {}".format(uid, type(uid).__name__)
    elif request.method == "POST":
        return "POST uid is {}\t type(uid) is {}".format(uid, type(uid).__name__)


@app.route("/float/<float:fid>")
def float_test(fid):
    return "fid is {}\t type(fid) is {}".format(fid, type(fid).__name__)

@app.route("/string/<username>/")
def string_test(username):
    return "username is {}\t type(username) is {}".format(username, type(username).__name__)

###############
"""
动态构建URL 或者说动态生成url
"""

with app.test_request_context():
                #方法名称          参数
    print url_for('string_test', username='gml')

"""
http 方法说明

options  客户端查询服务器支持哪些方法

delete 删除给定位置信息

put 更新内容

head 客户端告诉服务器，我只关系报头信息。你只给我包头就行。

get

post

"""

###################

@app.route("/cookie/")
def cookie_test(methods=["GET", "POST"]):

    uname = request.cookies.get("uname", "")
    print uname

    res = Response("hhh")
    res.set_cookie('uname', 'gml')
    return res

##########################
# session
# session 存放在哪里呢？Cookie中？
#
@app.route("/login/")
def login():
    session["username"] = "rick"

    return redirect("/")

app.secret_key = "rickguominglei"
########################
# 错误处理
# 1 abort(error_code) 方法
# 2 使用app.errorhandler(error_code)修饰器 定义一个error_code对应的处理页面

@app.route("/deal/error/")
def error_test():
    # abort之前代码 可以执行
    abort(404)
    # abort 之后代码执行不了

@app.errorhandler(404)
def deal_404(error):
    # error is werkzeug.exceptions.xx
    print error.code
    return "this is 404 html", error.code

if __name__ == "__main__":

    app.run(debug=True)